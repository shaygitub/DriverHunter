#pragma once
#include <iostream>
#include <Windows.h>
#define ALLOCATE_RETURN_PHYSICAL_IOCTL 0x80002010  // Allocates contigious memory and returns physical address and allocated memory
#define FREE_CONTIGUOUS_IOCTL 0x80002018
#define WRITE_DWORD_PHYSICAL_IOCTL 0x80002004
#define READ_DWORD_PHYSICAL_IOCTL 0x80002000
#define WRITE_DWORD_HARDWAREPORT_IOCTL 0x8000200C
#define READ_DWORD_HARDWAREPORT_IOCTL 0x80002008
#define MAP_IOSPACE_PHYSICAL_IOCTL 0x8000201C
#define UNMAP_IOSPACE_PHYSICAL_IOCTL 0x80002024
typedef LARGE_INTEGER PHYSICAL_ADDRESS, * PPHYSICAL_ADDRESS;


typedef struct _ALLOC_MEMORY_BUFFER {
    PHYSICAL_ADDRESS ExtraParameters;  // LowPart will be the size to allocate in system memory
    PHYSICAL_ADDRESS PhysicalAddress;
    PVOID AllocatedVirtualMemory;
    PHYSICAL_ADDRESS BufferPadding1;
    PHYSICAL_ADDRESS BufferPadding2;
    PHYSICAL_ADDRESS BufferPadding3;
}ALLOC_MEMORY_BUFFER, * PALLOC_MEMORY_BUFFER;


typedef struct _FREE_MEMORY_BUFFER {
    PHYSICAL_ADDRESS BufferPadding1;
    PHYSICAL_ADDRESS BufferPadding2;
    PVOID ContiguousMemory;
    PHYSICAL_ADDRESS BufferPadding3;
    PHYSICAL_ADDRESS BufferPadding4;
    PHYSICAL_ADDRESS BufferPadding5;
}FREE_MEMORY_BUFFER, * PFREE_MEMORY_BUFFER;


typedef struct _WRITE_PHYSICAL_BUFFER {
    PHYSICAL_ADDRESS DestinationAddress;
    PHYSICAL_ADDRESS ExtraParameters;  // HighPart = DWORD value to write, LowPart = MDL allocation size (4 to match I/O space)
}WRITE_PHYSICAL_BUFFER, * PWRITE_PHYSICAL_BUFFER;


typedef struct _READ_PHYSICAL_BUFFER {
    PHYSICAL_ADDRESS SourceAddress;  // LowPart will receive output value from driver
    PHYSICAL_ADDRESS ExtraParameters;  // HighPart = not used here, LowPart = MDL allocation size (should be bigger/eqaul than 4)
}READ_PHYSICAL_BUFFER, * PREAD_PHYSICAL_BUFFER;


typedef struct _WRITE_HARDWAREPORT_BUFFER {
    PHYSICAL_ADDRESS Parameters;  // LowPart = port number, HighPart = 4 (magic value)
    ULONG WriteData;
}WRITE_HARDWAREPORT_BUFFER, * PWRITE_HARDWAREPORT_BUFFER;


typedef struct _READ_HARDWAREPORT_BUFFER {
    PHYSICAL_ADDRESS Parameters;  // LowPart = port number, HighPart = 4 (magic value)
    ULONG ReadData;
}READ_HARDWAREPORT_BUFFER, * PREAD_HARDWAREPORT_BUFFER;


typedef struct _MAP_IOSPACE_BUFFER {
    PHYSICAL_ADDRESS ExtraParameters;  // LowPart = I/O space size
    PHYSICAL_ADDRESS PhysicalAddress;
    PHYSICAL_ADDRESS BufferPadding1;
    PHYSICAL_ADDRESS BufferPadding2;
    PHYSICAL_ADDRESS BufferPadding3; 
    PHYSICAL_ADDRESS IoSpaceAddress;
    PHYSICAL_ADDRESS BufferPadding4;
}MAP_IOSPACE_BUFFER, * PMAP_IOSPACE_BUFFER;


typedef struct _UNMAP_IOSPACE_BUFFER {
    PHYSICAL_ADDRESS ExtraParameters;  // LowPart = I/O space size
    PHYSICAL_ADDRESS BufferPadding1;
    PHYSICAL_ADDRESS BufferPadding2;
    PHYSICAL_ADDRESS BufferPadding3;
    PHYSICAL_ADDRESS BufferPadding4;
    PHYSICAL_ADDRESS IoSpaceAddress;
    PHYSICAL_ADDRESS BufferPadding5;
}UNMAP_IOSPACE_BUFFER, * PUNMAP_IOSPACE_BUFFER;


namespace IoctlTriggers {
    BOOL AllocatePhysicalMemory(ULONG PhyisicalMemorySize, PALLOC_MEMORY_BUFFER AllocationOutput, HANDLE DriverHandle);
    BOOL FreeContiguousMemory(PVOID ContiguousMemory, HANDLE DriverHandle);
    BOOL WriteIntoPhysicalMemory(ULONG WriteValue, PVOID DestinationPhysicalAddress, HANDLE DriverHandle);
    BOOL ReadFromPhysicalMemory(PVOID DestinationPhysicalAddress, ULONG IoSpaceSize, ULONG* ReadValue, HANDLE DriverHandle);
    BOOL WriteIntoHardwarePort(ULONG HardwarePortNumber, ULONG WriteValue, HANDLE DriverHandle);
    BOOL ReadFromHardwarePort(ULONG HardwarePortNumber, ULONG* ReadValue, HANDLE DriverHandle);
    BOOL MapIoSpaceKernel(PHYSICAL_ADDRESS PhysicalAddress, PVOID* IoSpaceBaseAddress, ULONG IoSpaceSize, HANDLE DriverHandle);
    BOOL UnmapIoSpaceKernel(PVOID IoSpaceBaseAddress, ULONG IoSpaceSize, HANDLE DriverHandle);
}