#include "Ioctl.h"


BOOL IoctlTriggers::AllocatePhysicalMemory(ULONG PhyisicalMemorySize, PALLOC_MEMORY_BUFFER AllocationOutput, HANDLE DriverHandle) {
	ALLOC_MEMORY_BUFFER DriverParams = { 0 };
    ULONG BytesReturned = 0;
	DriverParams.ExtraParameters.LowPart = PhyisicalMemorySize;
    if (PhyisicalMemorySize == 0 || AllocationOutput == NULL || DriverHandle == NULL || DriverHandle == INVALID_HANDLE_VALUE) {
        printf("[-] Contiguous memory allocation failed - invalid parameters\n");
        return FALSE;
    }
    if (!DeviceIoControl(DriverHandle, ALLOCATE_RETURN_PHYSICAL_IOCTL, &DriverParams,
        sizeof(DriverParams), &DriverParams, sizeof(DriverParams), &BytesReturned, NULL)) {
        printf("[-] Contiguous memory allocation the size of %lu bytes failed - %d\n", PhyisicalMemorySize, GetLastError());
        return FALSE;
    }
    printf("[+] Contiguous memory allocated at physical %p, virtual %p the size of %lu, BytesReturned = %lu\n",
        (PVOID)DriverParams.PhysicalAddress.QuadPart, DriverParams.AllocatedVirtualMemory, PhyisicalMemorySize, BytesReturned);
    RtlCopyMemory(AllocationOutput, &DriverParams, sizeof(DriverParams));
    return TRUE;
}


BOOL IoctlTriggers::FreeContiguousMemory(PVOID ContiguousMemory, HANDLE DriverHandle) {
    FREE_MEMORY_BUFFER DriverParams = { 0 };
    ULONG BytesReturned = 0;
    DriverParams.ContiguousMemory = ContiguousMemory;
    if (ContiguousMemory == 0 || DriverHandle == NULL || DriverHandle == INVALID_HANDLE_VALUE) {
        printf("[-] Contiguous memory freeing failed - invalid parameters\n");
        return FALSE;
    }
    if (!DeviceIoControl(DriverHandle, FREE_CONTIGUOUS_IOCTL, &DriverParams,
        sizeof(DriverParams), &DriverParams, sizeof(DriverParams), &BytesReturned, NULL)) {
        printf("[-] Contiguous memory freeing failed - %d\n", GetLastError());
        return FALSE;
    }
    printf("[+] Contiguous memory freed from physical %p, BytesReturned = %lu\n", ContiguousMemory, BytesReturned);
    return TRUE;
}


BOOL IoctlTriggers::WriteIntoPhysicalMemory(ULONG WriteValue, PVOID DestinationPhysicalAddress, HANDLE DriverHandle) {
    WRITE_PHYSICAL_BUFFER DriverParams = { 0 };
    ULONG BytesReturned = 0;
    DriverParams.DestinationAddress.QuadPart = (ULONG64)DestinationPhysicalAddress;
    DriverParams.ExtraParameters.LowPart = 4;
    DriverParams.ExtraParameters.HighPart = WriteValue;
    if (DestinationPhysicalAddress == 0 || DriverHandle == NULL || DriverHandle == INVALID_HANDLE_VALUE) {
        printf("[-] Write into physical memory failed - invalid parameters\n");
        return FALSE;
    }
    if (!DeviceIoControl(DriverHandle, WRITE_DWORD_PHYSICAL_IOCTL, &DriverParams,
        sizeof(DriverParams), &DriverParams, sizeof(DriverParams), &BytesReturned, NULL)) {
        printf("[-] Write into physical memory of value %lu bytes failed - %d\n", WriteValue, GetLastError());
        return FALSE;
    }
    printf("[+] Wrote value %lu into physical memory at physical %p, BytesReturned = %lu\n", WriteValue,
        DestinationPhysicalAddress, BytesReturned);
    return TRUE;
}


BOOL IoctlTriggers::ReadFromPhysicalMemory(PVOID DestinationPhysicalAddress, ULONG IoSpaceSize, ULONG* ReadValue, HANDLE DriverHandle) {
    READ_PHYSICAL_BUFFER DriverParams = { 0 };
    ULONG BytesReturned = 0;
    DriverParams.SourceAddress.QuadPart = (ULONG64)DestinationPhysicalAddress;
    DriverParams.ExtraParameters.LowPart = IoSpaceSize;
    if (DestinationPhysicalAddress == 0 || IoSpaceSize == 0 || DriverHandle == NULL || DriverHandle == INVALID_HANDLE_VALUE) {
        printf("[-] Read from physical memory of %p failed - invalid parameters\n", DestinationPhysicalAddress);
        return FALSE;
    }
    if (!DeviceIoControl(DriverHandle, READ_DWORD_PHYSICAL_IOCTL, &DriverParams,
        sizeof(DriverParams), &DriverParams, sizeof(DriverParams), &BytesReturned, NULL)) {
        printf("[-] Read from physical memory of %p bytes failed - %d\n", DestinationPhysicalAddress, GetLastError());
        return FALSE;
    }
    printf("[+] DWORD value at physical address %p -> %lu, BytesReturned = %lu\n", DestinationPhysicalAddress, 
        DriverParams.SourceAddress.LowPart, BytesReturned);
    if (ReadValue != NULL) {
        *ReadValue = DriverParams.SourceAddress.LowPart;
    }
    return TRUE;
}


BOOL IoctlTriggers::WriteIntoHardwarePort(ULONG HardwarePortNumber, ULONG WriteValue, HANDLE DriverHandle) {
    WRITE_HARDWAREPORT_BUFFER DriverParams = { 0 };
    ULONG BytesReturned = 0;
    DriverParams.Parameters.LowPart = HardwarePortNumber;
    DriverParams.Parameters.HighPart = 4;
    DriverParams.WriteData = WriteValue;
    if (HardwarePortNumber == 0 || WriteValue == NULL || DriverHandle == NULL || DriverHandle == INVALID_HANDLE_VALUE) {
        printf("[-] Write into hardware port %lu failed - invalid parameters\n", HardwarePortNumber);
        return FALSE;
    }
    if (!DeviceIoControl(DriverHandle, WRITE_DWORD_HARDWAREPORT_IOCTL, &DriverParams,
        sizeof(DriverParams), &DriverParams, sizeof(DriverParams), &BytesReturned, NULL)) {
        printf("[-] Write into hardware port %lu failed - %d\n", HardwarePortNumber, GetLastError());
        return FALSE;
    }
    printf("[+] Wrote value %lu into hardware port %lu, BytesReturned = %lu\n", WriteValue, HardwarePortNumber, BytesReturned);
    return TRUE;
}


BOOL IoctlTriggers::ReadFromHardwarePort(ULONG HardwarePortNumber, ULONG* ReadValue, HANDLE DriverHandle) {
    READ_HARDWAREPORT_BUFFER DriverParams = { 0 };
    ULONG BytesReturned = 0;
    DriverParams.Parameters.LowPart = HardwarePortNumber;
    DriverParams.Parameters.HighPart = 4;
    if (HardwarePortNumber == 0 || DriverHandle == NULL || DriverHandle == INVALID_HANDLE_VALUE) {
        printf("[-] Read from hardware port %lu failed - invalid parameters\n", HardwarePortNumber);
        return FALSE;
    }
    if (!DeviceIoControl(DriverHandle, READ_DWORD_HARDWAREPORT_IOCTL, &DriverParams,
        sizeof(DriverParams), &DriverParams, sizeof(DriverParams), &BytesReturned, NULL)) {
        printf("[-] Read from hardware port %lu failed - %d\n", HardwarePortNumber, GetLastError());
        return FALSE;
    }
    printf("[+] Read value %lu into hardware port %lu, BytesReturned = %lu\n",
        DriverParams.ReadData, HardwarePortNumber, BytesReturned);
    if (ReadValue != NULL) {
        *ReadValue = DriverParams.ReadData;
    }
    return TRUE;
}


BOOL IoctlTriggers::MapIoSpaceKernel(PHYSICAL_ADDRESS PhysicalAddress, PVOID* IoSpaceBaseAddress,
    ULONG IoSpaceSize, HANDLE DriverHandle) {
    MAP_IOSPACE_BUFFER DriverParams = { 0 };
    ULONG BytesReturned = 0;
    DriverParams.ExtraParameters.LowPart = IoSpaceSize;
    DriverParams.PhysicalAddress = PhysicalAddress;
    if (PhysicalAddress.QuadPart == 0 || IoSpaceSize == 0 || DriverHandle == NULL || DriverHandle == INVALID_HANDLE_VALUE) {
        printf("[-] Map I/O space for %p failed - invalid parameters\n", (PVOID)PhysicalAddress.QuadPart);
        return FALSE;
    }
    if (!DeviceIoControl(DriverHandle, MAP_IOSPACE_PHYSICAL_IOCTL, &DriverParams,
        sizeof(DriverParams), &DriverParams, sizeof(DriverParams), &BytesReturned, NULL)) {
        printf("[-] Map I/O space for %p failed - %d\n", (PVOID)PhysicalAddress.QuadPart, GetLastError());
        return FALSE;
    }
    printf("[+]  Map I/O space for %p into %p, BytesReturned = %lu\n",
        (PVOID)PhysicalAddress.QuadPart, (PVOID)DriverParams.IoSpaceAddress.QuadPart, BytesReturned);
    if (IoSpaceBaseAddress != NULL) {
        *IoSpaceBaseAddress = (PVOID)DriverParams.IoSpaceAddress.QuadPart;
    }
    return TRUE;
}


BOOL IoctlTriggers::UnmapIoSpaceKernel(PVOID IoSpaceBaseAddress, ULONG IoSpaceSize, HANDLE DriverHandle) {
        UNMAP_IOSPACE_BUFFER DriverParams = { 0 };
        ULONG BytesReturned = 0;
        DriverParams.ExtraParameters.LowPart = IoSpaceSize;
        DriverParams.IoSpaceAddress.QuadPart = (ULONG64)IoSpaceBaseAddress;
        if (IoSpaceBaseAddress == NULL || IoSpaceSize == 0 || DriverHandle == NULL || DriverHandle == INVALID_HANDLE_VALUE) {
            printf("[-] Unmap I/O space for %p failed - invalid parameters\n", IoSpaceBaseAddress);
            return FALSE;
        }
        if (!DeviceIoControl(DriverHandle, UNMAP_IOSPACE_PHYSICAL_IOCTL, &DriverParams,
            sizeof(DriverParams), &DriverParams, sizeof(DriverParams), &BytesReturned, NULL)) {
            printf("[-] Unmap I/O space for %p failed - %d\n", IoSpaceBaseAddress, GetLastError());
            return FALSE;
        }
        printf("[+] Unmap I/O space of %p, BytesReturned = %lu\n", IoSpaceBaseAddress, BytesReturned);
        return TRUE;
}